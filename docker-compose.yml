services:
  rev-proxy:
    build:
      context: ./system/rev-proxy
    container_name: identity-reverse-proxy
    ports:
      - "9000:80"
      - "5672:5671"
    depends_on:
      api:
        condition: service_started
      rabbitmq:
        condition: service_started
      blockchain-client:
        condition: service_started
    restart: unless-stopped
    networks:
      - default

  api:
    build:
      context: ./system
      dockerfile: api/Dockerfile
    container_name: identity-api
    working_dir: /root/app
    environment:
      - DB_CONNECTION_STRING=host=postgres user=api_user password=api_password dbname=digital_identity port=5432 sslmode=disable
      - ENV_TYPE=dev
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - db_net
      - default
  postgres:
    image: postgres:16
    container_name: postgres
    restart: always
    environment:
      POSTGRES_DB: digital_identity
      POSTGRES_USER: api_user
      POSTGRES_PASSWORD: api_password
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./dev_tools/scripts/postgres-init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U api_user -d digital_identity"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - db_netg

  blockchain-client:
    build:
      context: ./system
      dockerfile: blockchain-client/Dockerfile
    environment:
      - PROGRAM_ID=HxSN1yBPYopxe5vok6HquwokoKS4BriodHXrro3QvkfL
      - PAYER_KEYPAIR_PATH=/app/id.json
      - SOLANA_URL=http://host.docker.internal:8899
    volumes:
      - "C:/Users/jasiek/.config/solana/id.json:/app/id.json:ro"
    ports:
      - "8888:8888"
    networks:
      - default

  rabbitmq:
      build:
        context: ./system/rabbitmq
      container_name: identity-rabbitmq
      volumes:
        - ./system/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      expose:
        - "5672"
        - "15672"
networks:
  db_net:
    driver: bridge
volumes:
  pgdata:
    driver: local
